--------------------------------------------------------------------------------
                            MODULO 05
--------------------------------------------------------------------------------

###################################
  - CRIANDO PROJETO DO ZERO

  :yarn create react-app project_name   -> Ja cria um projeto com babel e webpack
                                          encapsulado, sem precisar fazer todas
                                          aquelas configuracoes.

  OBS: Configuracoes do eslint podem ser deletadas, serao configuradas manualmente
  mais tarde. (package.json)

  'index.html' -> excluir o manifest.json e o <meta> que chama ele.
  'App.js' -> arquivo pra comecar editar o react.

  Arquivos que nao serao utilizados:
    - App.css
    - App.test.js
    - index.css
    - logo.svg
    - serviceWorker.js
    - setupTests.js (exclusivo para pwas)

  Editar 'index.css' para corrigir os erros do serviceWorker.

###################################
    ESLint, Prettier & EditorConfig

  <> EditorConfig <>
  -> Botao direito na raiz 'criar .editorconfig'
    -> setar as duas ultimas linhas para 'true'
    -> adicionar end_of_line = lf

  <> ESLint <>
  :yarn add eslint
  :yarn eslint --init
   ->Como ESLint sempre eh instalado pelo npm, excluir o arquivo 'package-lock.json
   -> Rodar 'yarn' para atualizar as dependencias no 'yarn.lock'

  <> Prettier <>
  :yarn add prettier eslint-config-prettier eslint-plugin-prettier babel-eslint -D

  * Editar arquivo '.eslintrc.js'
    - Adicionar dois novos parametros para o 'extends':
      'prettier',
      'prettier/react'

    - Antes de parserOptions adicionar uma nova variavel:
      parser: 'babel-eslint'

    - Em plugins adicionar 'prettier'
    - Adicionar novas rules que por padrao sao diferentes das setadas pelo eslint
      do airbnb.

    - Criar arquivo na raiz '.prettierrc' e adicionar:
      {
        "singleQuote": true,
        "trailingComma": "es5"
      }
      Faz com que o prettier e a styleguide do airbnb se conversem melhor.


  Prettier deixa o codigo mais bonito e ESLint procura por erros na styleguide.

###################################
        Roteamento no React

  - Configurar rotas na aplicacao, como usuario pode navegar entre paginas via
  url, sem precisar recarregar paginas (SPA)

  :yarn add react-router-dom  -> Roteamento no frontend da app.


  Criar diretorio 'pages' -> 'Main' e 'Repository'
  -> Main/index.js : criar componente Main
  -> Repository/index.js : criar componente Repository

  * Cada rota da aplicacao eh um commponente.

  -> src/routes.js
  -> BrowserRouter por volta de toda a aplicacao.
  -> Switch basicamente garante que apenas uma rota seja chamada por momento
  -> Importar o routes dentro do App.js (componente raiz da aplicacao)

  Por padrao o react-router-dom nao procura por uma igualdade entre o path e a url
  por isso utiliza-se o parametro 'exact'

###################################
    Styled Components

  :yarn add styled-components -> Biblioteca que vai mudar a forma como eh escrito
                                  css em aplicacoes em react e react-native

  Criar arquivo 'styles.js' dentro do componente juntamente com index.js e sim
  extensao .js justamente por que o styled components permite escrever css emm um
  arquivo .js.

  Consequentemente na hora de retornar um texto por exemplo na aplicacao, utiliza-se
  o componente criado e estilizado para isso
  Ex: <h1> Hello World </h1> -> <Title> Hello World</Title>

  SyledComponents tambem permite encadeamento de estilos.

  Ex:
  export const Title = styled.h1`
    font-size: 24px;
    color: #7159c1;
    font-family: Arial, Helvetica, sans-serif;

    small {
      font-size: 10px;
      color: #333;
    }
  `;

  Ex:
    color: ${props => (props.error ? 'red' : '#7159c1')};
  Se o titulo por exemplo contem uma propriedade, pode-se passar uma funcao de acordo.

########################################
    Styled Components - Estilos Globais

  Estilos compartilhados entre a aplicacao. Entao cria-se um global styled dentro
  de styled components.
  'src/styles/global.js'

  - Importa em App.js
  - Cria div de fragmentacao e chama o componente.


########################################
    Estilizando Pagina Main (Aplicacao Github)

    :yarn add react-icons

    Componente vs Encadeamento: Quando o encadeamento possuir mais de dois niveis,
                                cria um componente separado.


    Estilizar a vontade. 'index.js' da pagina Main.

########################################
    Adicionando repositorios

  Assim que o usuario digitar um usuario valido, ir ate a API do Github e buscar
  as informacoes desse repositorio e salvar no estado do componente.

  -> Como o compnente criado ate agora agora eh um componente funcional nao eh possivel
  ter estado dele, por isso transformar em classe.

  Ex: export default class Main extends Component
  e utilizar render()

  Com o state (variavel de destado criado) a primeira coisa a ser armazenada eh
  os dados do input do usuario conforme ele for preenchendo.

  :yarn add axios -> Biblioteca para consumir APIs

  src/services/api.js -> Importar axios e configurar baseURL

  *ALERT* Adicionar em Rules do .eslintrc
  'react/state-in-constructor': ['error', 'never'],

  Erro do state requerindo constructor

  -> Alterar icone de adicionar para spinner de carregamento,
  utilizamos um if ternario que dada a condicao da variavel loading,
  ele altera o icone a ser exibido.

  Porem a animacao eh necessaria fazer manualmente atraves do styled component


########################################
        Listando Repositorios

  - Cria novo componente list
  - Adiciona no jsx do index.js
  - Estiliza e tcharam

########################################
         Utilizando LocalStorage

  // Carregar os dados do localStorage
  componentDidMount() {
    const repositories = localStorage.getItem('repositories');

    if (repositories) {
      this.setState({ repositories: JSON.parse(repositories) });
    }
  }

  // Salvar os dados do localStorage
  componentDidUpdate(_, prevState) {
    const { repositories } = this.state;

    if (prevState.repositories !== repositories) {
      localStorage.setItem('repositoriies', JSON.stringify(repositories));
    }
  }

########################################
          Navegacao de Rotas

(Details)
  Em navegacao utilizando React nao podemos utizar <a href=""> , pois essa maneira
  recarrega a pagina maneira tradicional, nao respeitando a SPA. Eh necessario
  usar um link proprio do 'react-router-dom'

  Ex: <a href=""> -> <Link to="">

  Agora, passar para a pagina como parametro qual repositorio ele vai acessar.
  - Tal parametro eh passado atraves na URL no 'Link', mas para isso eh necessario
  transformar em JavaScript {}

  *ALERT* -> http://localhost:3000/repository/facebook/react

  facebook/react eh o nome do repositorio mas como eh passado como parametro o navegador
  entende a '/' como se fosse um endereco a mais, uma pasta a mais, por isso eh
  necessario realizar um encode em relacao a essa '/'.

  Adicionar o parametro do repositorio no 'routes.js' assim como eh feito em node.

